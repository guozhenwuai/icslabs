#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
# name: Xinyue Wu
# ID: 515030910231
#
# Describe how and why you modified the baseline code.
# 1. use iaddl instruction to replace groups of instructions.
# 2. modify the conditional jump used to check loop.
# 3. reorder some instructions to avoid load/use hazard.
# 4. do loop unrolling to save jump time.
# 5. decrease the times of src++ and dst++
# 6. use leave instruction to replace groups of instructions.
# 7. use jump table
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax, %eax		# count = 0
	iaddl $-11, %edx     # len-11 < 0?
	jle jmp0 	# if so, goto jmp0:

pos0:	mrmovl (%ebx), %esi	# read val from src...
    mrmovl 4(%ebx), %edi # read val from src+1...
	rmmovl %esi, (%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle pos1    		# if so, goto pos1:
	iaddl $1, %eax      # count++
pos1:	rmmovl %edi, 4(%ecx)	# ...and store src+1 val to dst
	andl %edi, %edi     # val <= 0?
	jle pos2            # if so, goto pos2:
	iaddl $1, %eax      # count++
pos2:	mrmovl 8(%ebx), %esi # read val from src+2...
	mrmovl 12(%ebx), %edi # read val from src+3...
	rmmovl %esi, 8(%ecx) # ...and store src+2 val to dst
	andl %esi, %esi		# val <= 0?
	jle pos3			# if so, goto pos3:
	iaddl $1, %eax      # count++
pos3:	rmmovl %edi, 12(%ecx)	# ...and store src+3 val to dst
	andl %edi, %edi		# val <= 0?
	jle	pos4			# if so, goto pos4:
	iaddl $1, %eax      # count++
pos4:	mrmovl 16(%ebx), %esi # read val from src+4...
	mrmovl 20(%ebx), %edi # read val from src+5...
	rmmovl %esi, 16(%ecx) # ...and store src+4 val to dst
	andl %esi, %esi		# val <= 0?
	jle	pos5			# if so, goto pos5:
	iaddl $1, %eax      # count++
pos5:	rmmovl %edi, 20(%ecx)	# ...and store src+5 val to dst
	andl %edi, %edi		# val <= 0?
	jle	pos6			# if so, goto pos6:
	iaddl $1, %eax      # count++
pos6:	mrmovl 24(%ebx), %esi # read val from src+6...
	mrmovl 28(%ebx), %edi # read val from src+7...
	rmmovl %esi, 24(%ecx) # ...and store src+6 val to dst
	andl %esi, %esi		# val <= 0?
	jle	pos7			# if so, goto pos7:
	iaddl $1, %eax      # count++
pos7:	rmmovl %edi, 28(%ecx)	# ...and store src+7 val to dst
	andl %edi, %edi		# val <= 0?
	jle	pos8			# if so, goto pos8:
	iaddl $1, %eax      # count++
pos8:	mrmovl 32(%ebx), %esi # read val from src+8...
	mrmovl 36(%ebx), %edi # read val from src+9...
	rmmovl %esi, 32(%ecx) # ...and store src+8 val to dst
	andl %esi, %esi		# val <= 0?
	jle	pos9			# if so, goto pos9:
	iaddl $1, %eax      # count++
pos9:	rmmovl %edi, 36(%ecx)	# ...and store src+9 val to dst
	andl %edi, %edi		# val <= 0?
	jle	pos10			# if so, goto pos10:
	iaddl $1, %eax      # count++
pos10:	mrmovl 40(%ebx), %esi # read val from src+10...
	mrmovl 44(%ebx), %edi # read val from src+11...
	rmmovl %esi, 40(%ecx) # ...and store src+10 val to dst
	andl %esi, %esi		# val <= 0?
	jle	pos11			# if so, goto pos11:
	iaddl $1, %eax      # count++
pos11:	rmmovl %edi, 44(%ecx)	# ...and store src+11 val to dst
	andl %edi, %edi		# val <= 0?
	jle	pos12			# if so, goto pos12:
	iaddl $1, %eax      # count++
pos12:	
	iaddl $48, %ebx		# src += 12
	iaddl $48, %ecx		# dst += 12
	iaddl $-12, %edx		# len-=12; len > 0?
	jg pos0				# if so, goto pos0:
	jmp jmp0			# else, goto jmp0:
jmp0:	iaddl $11, %edx	# len += 11
	addl %edx, %edx
	addl %edx, %edx	# len *= 4
	mrmovl jt(%edx), %edx	# load address
	pushl %edx
	ret					# make use of jump table

jmp11:	mrmovl 40(%ebx), %esi # read val from src...
	rmmovl %esi, 40(%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp10			# if so, goto jmp10:
	iaddl $1, %eax		# count++
	jmp jmp10			# goto jmp10:
jmp9:	mrmovl 32(%ebx), %esi # read val from src...
	rmmovl %esi, 32(%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp8			# if so, goto jmp8:
	iaddl $1, %eax		# count++
	jmp jmp8			# goto jmp8:
jmp7:	mrmovl 24(%ebx), %esi # read val from src...
	rmmovl %esi, 24(%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp6			# if so, goto jmp6:
	iaddl $1, %eax		# count++
	jmp jmp6			# goto jmp6:
jmp5:	mrmovl 16(%ebx), %esi # read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp4			# if so, goto jmp4:
	iaddl $1, %eax		# count++
	jmp jmp4			# goto jmp4:
jmp3:	mrmovl 8(%ebx), %esi # read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp2			# if so, goto jmp2:
	iaddl $1, %eax		# count++
	jmp jmp2			# goto jmp2:
jmp1:	mrmovl (%ebx), %esi # read val from src...
	rmmovl %esi, (%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle Donee			# if so, goto Donee:
	iaddl $1, %eax		# count++
	jmp Donee			# goto Donee:

jmp10:	mrmovl 32(%ebx), %esi	# read val from src...
	mrmovl 36(%ebx), %edi	# read val from src+1...
	rmmovl %esi, 32(%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp00			# if so, goto jmp00:
	iaddl $1, %eax		# count++
jmp00:	rmmovl %edi, 36(%ecx)	# ...and store src+1 val to dst
	andl %edi, %edi	# val <= 0?
	jle jmp8			# if so, goto jmp8:
	iaddl $1, %eax		# count++
jmp8:	mrmovl 24(%ebx), %esi	# read val from src...
	mrmovl 28(%ebx), %edi	# read val from src+1...
	rmmovl %esi, 24(%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp88			# if so, goto jmp88:
	iaddl $1, %eax		# count++
jmp88:	rmmovl %edi, 28(%ecx)	# ...and store src+1 val to dst
	andl %edi, %edi	# val <= 0?
	jle jmp6			# if so, goto jmp6:
	iaddl $1, %eax		# count++
jmp6:	mrmovl 16(%ebx), %esi	# read val from src...
	mrmovl 20(%ebx), %edi	# read val from src+1...
	rmmovl %esi, 16(%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp66			# if so, goto jmp66:
	iaddl $1, %eax		# count++
jmp66:	rmmovl %edi, 20(%ecx)	# ...and store src+1 val to dst
	andl %edi, %edi	# val <= 0?
	jle jmp4			# if so, goto jmp4:
	iaddl $1, %eax		# count++
jmp4:	mrmovl 8(%ebx), %esi	# read val from src...
	mrmovl 12(%ebx), %edi	# read val from src+1...
	rmmovl %esi, 8(%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp44			# if so, goto jmp44:
	iaddl $1, %eax		# count++
jmp44:	rmmovl %edi, 12(%ecx)	# ...and store src+1 val to dst
	andl %edi, %edi	# val <= 0?
	jle jmp2			# if so, goto jmp2:
	iaddl $1, %eax		# count++
jmp2:	mrmovl (%ebx), %esi	# read val from src...
	mrmovl 4(%ebx), %edi	# read val from src+1...
	rmmovl %esi, (%ecx)	# ...and store src val to dst
	andl %esi, %esi		# val <= 0?
	jle jmp22			# if so, goto jmp22:
	iaddl $1, %eax		# count++
jmp22:	rmmovl %edi, 4(%ecx)	# ...and store src+1 val to dst
	andl %edi, %edi	# val <= 0?
	jle Donee			# if so, goto Donee:
	iaddl $1, %eax		# count++
Donee:
	popl %edi
	popl %ebx
	popl %esi
	leave
	ret
.align 4
jt:
	.long Donee
	.long jmp1
	.long jmp2
	.long jmp3
	.long jmp4
	.long jmp5
	.long jmp6
	.long jmp7
	.long jmp8
	.long jmp9
	.long jmp10
	.long jmp11
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
